board = ['-', '-', '-', '-', '-', '-', '-', '-', '-']   # игровое поле
turn_count = 0   # счетчик ходов
side = 'X'   # чей ход
win_combinations = [
    (0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6),
    (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)]   # выигрышные комбинации

# одноразовое приветствие
def first_print_board():
    print('Это игровое поле:')
    print_board(board)
    print('Нумерация клеток:')
    print('1 2 3')
    print('4 5 6')
    print('7 8 9')

# распечатка игрового поля
def print_board(board):
    print(f'{board[0]} {board[1]} {board[2]}')
    print(f'{board[3]} {board[4]} {board[5]}')
    print(f'{board[6]} {board[7]} {board[8]}')

# проверка на победу
def find_winner(board, winner):
    global side
    for x, y, z in winner:
        if board[x] == board[y] == board[z] and board[x] != '-':
            print_board(board)
            return print(f'Игра закончена! \nВыиграл {side}!')
    print_board(board)
    return play(board)

# игра
def play(board):
    global turn_count
    global side
    current_turn = None
# выбор того кто ходит, определяется по счетику ходов
    if turn_count == 0 or turn_count % 2 == 0:
        side = 'Х'
        current_turn = int(input("Ходит крестик. Введите номер клетки от 1 до 9:"))
    elif turn_count == 1 or turn_count % 2 == 1:
        side = '0'
        current_turn = int(input("Ходит нолик. Введите номер клетки от 1 до 9:"))
# проверка на соблюдение условий для введенных данных, вписываем символ в игровое поле, крутим счетчик и отправляем далее проверить на победу
    if 0 < current_turn < 10 and board[current_turn-1] == '-':
        board[current_turn - 1] = side
        turn_count += 1
        find_winner(board, win_combinations)
    else:
        print("Ошибка ввода!")
        return play(board)


print('Добро пожаловать в игру "Крестики-нолики"!')
first_print_board()
play(board)
