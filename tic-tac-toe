board = ['-', '-', '-', '-', '-', '-', '-', '-', '-']   # игровое поле
turn_count = 0   # счетчик ходов
side = 'X'   # чей ход
win_combinations = [
    (0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6),
    (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)]   # выигрышные комбинации


# приветствие
def first_print_board():
    print(f'Добро пожаловать в игру "Крестики-нолики"! \nЭто игровое поле:')
    print_board(board)
    print(f'Нумерация клеток:  \n1 2 3 \n4 5 6 \n7 8 9')


# распечатка игрового поля
def print_board(board):
    print(f'{board[0]} {board[1]} {board[2]}')
    print(f'{board[3]} {board[4]} {board[5]}')
    print(f'{board[6]} {board[7]} {board[8]}')


# проверка на ничью/победу
def find_winner(board, winner):
    global side
    print_board(board)
# проверка на ничью
    if turn_count == 9: return print(f'Ничья! \nИгра закончена!')
    else:
        for x, y, z in winner:
# проверка на победу
            if board[x] == board[y] == board[z] and board[x] != '-':
                return print(f'Игра закончена! \nВыиграл {side}!')
# если победителя нет, играем дальше
        return play(board)


# игра
def play(board):
    global turn_count
    global side
    current_turn = None
# приветствие
    if turn_count == 0: first_print_board()
# выбор того кто ходит, определяется по счетику ходов
    if turn_count == 0 or turn_count % 2 == 0:
        side = 'Х'
        current_turn = int(input(f"Ходит крестик. \nВведите номер клетки от 1 до 9:\n"))
    elif turn_count == 1 or turn_count % 2 == 1:
        side = '0'
        current_turn = int(input(f"Ходит нолик. \nВведите номер клетки от 1 до 9:\n"))
# проверка на соблюдение условий для введенных данных,
# отмечаем символ на игровом поле, крутим счетчик и отправляем далее проверить на ничью/победу
    if 0 < current_turn < 10 and board[current_turn-1] == '-':
        board[current_turn - 1] = side
        turn_count += 1
        find_winner(board, win_combinations)
    else:
        print("Ошибка ввода!")
        return play(board)


play(board)
